/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FlowStep } from "./FlowStep";
import { FlowStepCountArgs } from "./FlowStepCountArgs";
import { FlowStepFindManyArgs } from "./FlowStepFindManyArgs";
import { FlowStepFindUniqueArgs } from "./FlowStepFindUniqueArgs";
import { CreateFlowStepArgs } from "./CreateFlowStepArgs";
import { UpdateFlowStepArgs } from "./UpdateFlowStepArgs";
import { DeleteFlowStepArgs } from "./DeleteFlowStepArgs";
import { ConversationFlow } from "../../conversationFlow/base/ConversationFlow";
import { FlowStepService } from "../flowStep.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FlowStep)
export class FlowStepResolverBase {
  constructor(
    protected readonly service: FlowStepService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FlowStep",
    action: "read",
    possession: "any",
  })
  async _flowStepsMeta(
    @graphql.Args() args: FlowStepCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FlowStep])
  @nestAccessControl.UseRoles({
    resource: "FlowStep",
    action: "read",
    possession: "any",
  })
  async flowSteps(
    @graphql.Args() args: FlowStepFindManyArgs
  ): Promise<FlowStep[]> {
    return this.service.flowSteps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FlowStep, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FlowStep",
    action: "read",
    possession: "own",
  })
  async flowStep(
    @graphql.Args() args: FlowStepFindUniqueArgs
  ): Promise<FlowStep | null> {
    const result = await this.service.flowStep(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FlowStep)
  @nestAccessControl.UseRoles({
    resource: "FlowStep",
    action: "create",
    possession: "any",
  })
  async createFlowStep(
    @graphql.Args() args: CreateFlowStepArgs
  ): Promise<FlowStep> {
    return await this.service.createFlowStep({
      ...args,
      data: {
        ...args.data,

        conversationFlow: args.data.conversationFlow
          ? {
              connect: args.data.conversationFlow,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FlowStep)
  @nestAccessControl.UseRoles({
    resource: "FlowStep",
    action: "update",
    possession: "any",
  })
  async updateFlowStep(
    @graphql.Args() args: UpdateFlowStepArgs
  ): Promise<FlowStep | null> {
    try {
      return await this.service.updateFlowStep({
        ...args,
        data: {
          ...args.data,

          conversationFlow: args.data.conversationFlow
            ? {
                connect: args.data.conversationFlow,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FlowStep)
  @nestAccessControl.UseRoles({
    resource: "FlowStep",
    action: "delete",
    possession: "any",
  })
  async deleteFlowStep(
    @graphql.Args() args: DeleteFlowStepArgs
  ): Promise<FlowStep | null> {
    try {
      return await this.service.deleteFlowStep(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ConversationFlow, {
    nullable: true,
    name: "conversationFlow",
  })
  @nestAccessControl.UseRoles({
    resource: "ConversationFlow",
    action: "read",
    possession: "any",
  })
  async getConversationFlow(
    @graphql.Parent() parent: FlowStep
  ): Promise<ConversationFlow | null> {
    const result = await this.service.getConversationFlow(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
