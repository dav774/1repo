/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Usuario } from "./Usuario";
import { UsuarioCountArgs } from "./UsuarioCountArgs";
import { UsuarioFindManyArgs } from "./UsuarioFindManyArgs";
import { UsuarioFindUniqueArgs } from "./UsuarioFindUniqueArgs";
import { CreateUsuarioArgs } from "./CreateUsuarioArgs";
import { UpdateUsuarioArgs } from "./UpdateUsuarioArgs";
import { DeleteUsuarioArgs } from "./DeleteUsuarioArgs";
import { UsuarioService } from "../usuario.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Usuario)
export class UsuarioResolverBase {
  constructor(
    protected readonly service: UsuarioService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Usuario",
    action: "read",
    possession: "any",
  })
  async _usuariosMeta(
    @graphql.Args() args: UsuarioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Usuario])
  @nestAccessControl.UseRoles({
    resource: "Usuario",
    action: "read",
    possession: "any",
  })
  async usuarios(
    @graphql.Args() args: UsuarioFindManyArgs
  ): Promise<Usuario[]> {
    return this.service.usuarios(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Usuario, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Usuario",
    action: "read",
    possession: "own",
  })
  async usuario(
    @graphql.Args() args: UsuarioFindUniqueArgs
  ): Promise<Usuario | null> {
    const result = await this.service.usuario(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usuario)
  @nestAccessControl.UseRoles({
    resource: "Usuario",
    action: "create",
    possession: "any",
  })
  async createUsuario(
    @graphql.Args() args: CreateUsuarioArgs
  ): Promise<Usuario> {
    return await this.service.createUsuario({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Usuario)
  @nestAccessControl.UseRoles({
    resource: "Usuario",
    action: "update",
    possession: "any",
  })
  async updateUsuario(
    @graphql.Args() args: UpdateUsuarioArgs
  ): Promise<Usuario | null> {
    try {
      return await this.service.updateUsuario({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Usuario)
  @nestAccessControl.UseRoles({
    resource: "Usuario",
    action: "delete",
    possession: "any",
  })
  async deleteUsuario(
    @graphql.Args() args: DeleteUsuarioArgs
  ): Promise<Usuario | null> {
    try {
      return await this.service.deleteUsuario(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
