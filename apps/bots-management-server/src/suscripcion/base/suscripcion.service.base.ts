/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Suscripcion as PrismaSuscripcion } from "@prisma/client";

export class SuscripcionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SuscripcionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.suscripcion.count(args);
  }

  async suscripcions(
    args: Prisma.SuscripcionFindManyArgs
  ): Promise<PrismaSuscripcion[]> {
    return this.prisma.suscripcion.findMany(args);
  }
  async suscripcion(
    args: Prisma.SuscripcionFindUniqueArgs
  ): Promise<PrismaSuscripcion | null> {
    return this.prisma.suscripcion.findUnique(args);
  }
  async createSuscripcion(
    args: Prisma.SuscripcionCreateArgs
  ): Promise<PrismaSuscripcion> {
    return this.prisma.suscripcion.create(args);
  }
  async updateSuscripcion(
    args: Prisma.SuscripcionUpdateArgs
  ): Promise<PrismaSuscripcion> {
    return this.prisma.suscripcion.update(args);
  }
  async deleteSuscripcion(
    args: Prisma.SuscripcionDeleteArgs
  ): Promise<PrismaSuscripcion> {
    return this.prisma.suscripcion.delete(args);
  }
}
