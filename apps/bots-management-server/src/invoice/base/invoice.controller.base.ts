/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { InvoiceService } from "../invoice.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { InvoiceCreateInput } from "./InvoiceCreateInput";
import { Invoice } from "./Invoice";
import { InvoiceFindManyArgs } from "./InvoiceFindManyArgs";
import { InvoiceWhereUniqueInput } from "./InvoiceWhereUniqueInput";
import { InvoiceUpdateInput } from "./InvoiceUpdateInput";
import { PaymentIntentFindManyArgs } from "../../paymentIntent/base/PaymentIntentFindManyArgs";
import { PaymentIntent } from "../../paymentIntent/base/PaymentIntent";
import { PaymentIntentWhereUniqueInput } from "../../paymentIntent/base/PaymentIntentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class InvoiceControllerBase {
  constructor(
    protected readonly service: InvoiceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Invoice })
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createInvoice(
    @common.Body() data: InvoiceCreateInput
  ): Promise<Invoice> {
    return await this.service.createInvoice({
      data: {
        ...data,

        subscription: data.subscription
          ? {
              connect: data.subscription,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amountDue: true,
        status: true,
        stripeInvoiceId: true,

        subscription: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Invoice] })
  @ApiNestedQuery(InvoiceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async invoices(@common.Req() request: Request): Promise<Invoice[]> {
    const args = plainToClass(InvoiceFindManyArgs, request.query);
    return this.service.invoices({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amountDue: true,
        status: true,
        stripeInvoiceId: true,

        subscription: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Invoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async invoice(
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<Invoice | null> {
    const result = await this.service.invoice({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amountDue: true,
        status: true,
        stripeInvoiceId: true,

        subscription: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Invoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateInvoice(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() data: InvoiceUpdateInput
  ): Promise<Invoice | null> {
    try {
      return await this.service.updateInvoice({
        where: params,
        data: {
          ...data,

          subscription: data.subscription
            ? {
                connect: data.subscription,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amountDue: true,
          status: true,
          stripeInvoiceId: true,

          subscription: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Invoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteInvoice(
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<Invoice | null> {
    try {
      return await this.service.deleteInvoice({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amountDue: true,
          status: true,
          stripeInvoiceId: true,

          subscription: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentIntents")
  @ApiNestedQuery(PaymentIntentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentIntent",
    action: "read",
    possession: "any",
  })
  async findPaymentIntents(
    @common.Req() request: Request,
    @common.Param() params: InvoiceWhereUniqueInput
  ): Promise<PaymentIntent[]> {
    const query = plainToClass(PaymentIntentFindManyArgs, request.query);
    const results = await this.service.findPaymentIntents(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        amount: true,
        stripePaymentIntentId: true,

        invoice: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentIntents")
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "update",
    possession: "any",
  })
  async connectPaymentIntents(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: PaymentIntentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentIntents: {
        connect: body,
      },
    };
    await this.service.updateInvoice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentIntents")
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "update",
    possession: "any",
  })
  async updatePaymentIntents(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: PaymentIntentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentIntents: {
        set: body,
      },
    };
    await this.service.updateInvoice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentIntents")
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentIntents(
    @common.Param() params: InvoiceWhereUniqueInput,
    @common.Body() body: PaymentIntentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentIntents: {
        disconnect: body,
      },
    };
    await this.service.updateInvoice({
      where: params,
      data,
      select: { id: true },
    });
  }
}
