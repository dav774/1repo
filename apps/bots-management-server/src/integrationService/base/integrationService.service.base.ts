/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  IntegrationService as PrismaIntegrationService,
} from "@prisma/client";

export class IntegrationServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IntegrationServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.integrationService.count(args);
  }

  async integrationServices(
    args: Prisma.IntegrationServiceFindManyArgs
  ): Promise<PrismaIntegrationService[]> {
    return this.prisma.integrationService.findMany(args);
  }
  async integrationService(
    args: Prisma.IntegrationServiceFindUniqueArgs
  ): Promise<PrismaIntegrationService | null> {
    return this.prisma.integrationService.findUnique(args);
  }
  async createIntegrationService(
    args: Prisma.IntegrationServiceCreateArgs
  ): Promise<PrismaIntegrationService> {
    return this.prisma.integrationService.create(args);
  }
  async updateIntegrationService(
    args: Prisma.IntegrationServiceUpdateArgs
  ): Promise<PrismaIntegrationService> {
    return this.prisma.integrationService.update(args);
  }
  async deleteIntegrationService(
    args: Prisma.IntegrationServiceDeleteArgs
  ): Promise<PrismaIntegrationService> {
    return this.prisma.integrationService.delete(args);
  }
}
