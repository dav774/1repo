/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { IntegrationService } from "./IntegrationService";
import { IntegrationServiceCountArgs } from "./IntegrationServiceCountArgs";
import { IntegrationServiceFindManyArgs } from "./IntegrationServiceFindManyArgs";
import { IntegrationServiceFindUniqueArgs } from "./IntegrationServiceFindUniqueArgs";
import { CreateIntegrationServiceArgs } from "./CreateIntegrationServiceArgs";
import { UpdateIntegrationServiceArgs } from "./UpdateIntegrationServiceArgs";
import { DeleteIntegrationServiceArgs } from "./DeleteIntegrationServiceArgs";
import { IntegrationServiceService } from "../integrationService.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IntegrationService)
export class IntegrationServiceResolverBase {
  constructor(
    protected readonly service: IntegrationServiceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IntegrationService",
    action: "read",
    possession: "any",
  })
  async _integrationServicesMeta(
    @graphql.Args() args: IntegrationServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IntegrationService])
  @nestAccessControl.UseRoles({
    resource: "IntegrationService",
    action: "read",
    possession: "any",
  })
  async integrationServices(
    @graphql.Args() args: IntegrationServiceFindManyArgs
  ): Promise<IntegrationService[]> {
    return this.service.integrationServices(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IntegrationService, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IntegrationService",
    action: "read",
    possession: "own",
  })
  async integrationService(
    @graphql.Args() args: IntegrationServiceFindUniqueArgs
  ): Promise<IntegrationService | null> {
    const result = await this.service.integrationService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IntegrationService)
  @nestAccessControl.UseRoles({
    resource: "IntegrationService",
    action: "create",
    possession: "any",
  })
  async createIntegrationService(
    @graphql.Args() args: CreateIntegrationServiceArgs
  ): Promise<IntegrationService> {
    return await this.service.createIntegrationService({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IntegrationService)
  @nestAccessControl.UseRoles({
    resource: "IntegrationService",
    action: "update",
    possession: "any",
  })
  async updateIntegrationService(
    @graphql.Args() args: UpdateIntegrationServiceArgs
  ): Promise<IntegrationService | null> {
    try {
      return await this.service.updateIntegrationService({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IntegrationService)
  @nestAccessControl.UseRoles({
    resource: "IntegrationService",
    action: "delete",
    possession: "any",
  })
  async deleteIntegrationService(
    @graphql.Args() args: DeleteIntegrationServiceArgs
  ): Promise<IntegrationService | null> {
    try {
      return await this.service.deleteIntegrationService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
