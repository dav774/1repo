/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Product as PrismaProduct } from "@prisma/client";
import { ProductCreateInput } from "./ProductCreateInput";
import { Product } from "./Product";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductUpdateInput } from "./ProductUpdateInput";

export class ProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProductCountArgs, "select">): Promise<number> {
    return this.prisma.product.count(args);
  }

  async products(args: Prisma.ProductFindManyArgs): Promise<PrismaProduct[]> {
    return this.prisma.product.findMany(args);
  }
  async product(
    args: Prisma.ProductFindUniqueArgs
  ): Promise<PrismaProduct | null> {
    return this.prisma.product.findUnique(args);
  }
  async createProduct(args: Prisma.ProductCreateArgs): Promise<PrismaProduct> {
    return this.prisma.product.create(args);
  }
  async updateProduct(args: Prisma.ProductUpdateArgs): Promise<PrismaProduct> {
    return this.prisma.product.update(args);
  }
  async deleteProduct(args: Prisma.ProductDeleteArgs): Promise<PrismaProduct> {
    return this.prisma.product.delete(args);
  }
  async CreateProduct(args: ProductCreateInput): Promise<Product> {
    throw new Error("Not implemented");
  }
  async DeleteProduct(args: ProductWhereUniqueInput): Promise<Product> {
    throw new Error("Not implemented");
  }
  async GetProduct(args: ProductWhereUniqueInput): Promise<Product> {
    throw new Error("Not implemented");
  }
  async ListProducts(args: ProductFindManyArgs): Promise<Product[]> {
    throw new Error("Not implemented");
  }
  async UpdateProduct(args: ProductUpdateInput): Promise<Product> {
    throw new Error("Not implemented");
  }
}
