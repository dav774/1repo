/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ConversationFlow } from "./ConversationFlow";
import { ConversationFlowCountArgs } from "./ConversationFlowCountArgs";
import { ConversationFlowFindManyArgs } from "./ConversationFlowFindManyArgs";
import { ConversationFlowFindUniqueArgs } from "./ConversationFlowFindUniqueArgs";
import { CreateConversationFlowArgs } from "./CreateConversationFlowArgs";
import { UpdateConversationFlowArgs } from "./UpdateConversationFlowArgs";
import { DeleteConversationFlowArgs } from "./DeleteConversationFlowArgs";
import { FlowStepFindManyArgs } from "../../flowStep/base/FlowStepFindManyArgs";
import { FlowStep } from "../../flowStep/base/FlowStep";
import { ConversationFlowService } from "../conversationFlow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ConversationFlow)
export class ConversationFlowResolverBase {
  constructor(
    protected readonly service: ConversationFlowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ConversationFlow",
    action: "read",
    possession: "any",
  })
  async _conversationFlowsMeta(
    @graphql.Args() args: ConversationFlowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ConversationFlow])
  @nestAccessControl.UseRoles({
    resource: "ConversationFlow",
    action: "read",
    possession: "any",
  })
  async conversationFlows(
    @graphql.Args() args: ConversationFlowFindManyArgs
  ): Promise<ConversationFlow[]> {
    return this.service.conversationFlows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ConversationFlow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ConversationFlow",
    action: "read",
    possession: "own",
  })
  async conversationFlow(
    @graphql.Args() args: ConversationFlowFindUniqueArgs
  ): Promise<ConversationFlow | null> {
    const result = await this.service.conversationFlow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationFlow)
  @nestAccessControl.UseRoles({
    resource: "ConversationFlow",
    action: "create",
    possession: "any",
  })
  async createConversationFlow(
    @graphql.Args() args: CreateConversationFlowArgs
  ): Promise<ConversationFlow> {
    return await this.service.createConversationFlow({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationFlow)
  @nestAccessControl.UseRoles({
    resource: "ConversationFlow",
    action: "update",
    possession: "any",
  })
  async updateConversationFlow(
    @graphql.Args() args: UpdateConversationFlowArgs
  ): Promise<ConversationFlow | null> {
    try {
      return await this.service.updateConversationFlow({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConversationFlow)
  @nestAccessControl.UseRoles({
    resource: "ConversationFlow",
    action: "delete",
    possession: "any",
  })
  async deleteConversationFlow(
    @graphql.Args() args: DeleteConversationFlowArgs
  ): Promise<ConversationFlow | null> {
    try {
      return await this.service.deleteConversationFlow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FlowStep], { name: "flowSteps" })
  @nestAccessControl.UseRoles({
    resource: "FlowStep",
    action: "read",
    possession: "any",
  })
  async findFlowSteps(
    @graphql.Parent() parent: ConversationFlow,
    @graphql.Args() args: FlowStepFindManyArgs
  ): Promise<FlowStep[]> {
    const results = await this.service.findFlowSteps(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
