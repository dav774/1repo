/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConversationFlow as PrismaConversationFlow,
  FlowStep as PrismaFlowStep,
} from "@prisma/client";

export class ConversationFlowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationFlowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationFlow.count(args);
  }

  async conversationFlows(
    args: Prisma.ConversationFlowFindManyArgs
  ): Promise<PrismaConversationFlow[]> {
    return this.prisma.conversationFlow.findMany(args);
  }
  async conversationFlow(
    args: Prisma.ConversationFlowFindUniqueArgs
  ): Promise<PrismaConversationFlow | null> {
    return this.prisma.conversationFlow.findUnique(args);
  }
  async createConversationFlow(
    args: Prisma.ConversationFlowCreateArgs
  ): Promise<PrismaConversationFlow> {
    return this.prisma.conversationFlow.create(args);
  }
  async updateConversationFlow(
    args: Prisma.ConversationFlowUpdateArgs
  ): Promise<PrismaConversationFlow> {
    return this.prisma.conversationFlow.update(args);
  }
  async deleteConversationFlow(
    args: Prisma.ConversationFlowDeleteArgs
  ): Promise<PrismaConversationFlow> {
    return this.prisma.conversationFlow.delete(args);
  }

  async findFlowSteps(
    parentId: string,
    args: Prisma.FlowStepFindManyArgs
  ): Promise<PrismaFlowStep[]> {
    return this.prisma.conversationFlow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .flowSteps(args);
  }
}
