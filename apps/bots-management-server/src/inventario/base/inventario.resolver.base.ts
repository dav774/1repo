/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Inventario } from "./Inventario";
import { InventarioCountArgs } from "./InventarioCountArgs";
import { InventarioFindManyArgs } from "./InventarioFindManyArgs";
import { InventarioFindUniqueArgs } from "./InventarioFindUniqueArgs";
import { DeleteInventarioArgs } from "./DeleteInventarioArgs";
import { InventarioService } from "../inventario.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Inventario)
export class InventarioResolverBase {
  constructor(
    protected readonly service: InventarioService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Inventario",
    action: "read",
    possession: "any",
  })
  async _inventariosMeta(
    @graphql.Args() args: InventarioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Inventario])
  @nestAccessControl.UseRoles({
    resource: "Inventario",
    action: "read",
    possession: "any",
  })
  async inventarios(
    @graphql.Args() args: InventarioFindManyArgs
  ): Promise<Inventario[]> {
    return this.service.inventarios(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Inventario, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Inventario",
    action: "read",
    possession: "own",
  })
  async inventario(
    @graphql.Args() args: InventarioFindUniqueArgs
  ): Promise<Inventario | null> {
    const result = await this.service.inventario(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Inventario)
  @nestAccessControl.UseRoles({
    resource: "Inventario",
    action: "delete",
    possession: "any",
  })
  async deleteInventario(
    @graphql.Args() args: DeleteInventarioArgs
  ): Promise<Inventario | null> {
    try {
      return await this.service.deleteInventario(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
